
@import crack.extgen generateExtension;

@generateExtension _mongoc  {
    @filename 'mongo-c-bindings.cpp'
    @dumpsymbols 'mongo-c-bindings.txt'
    @inject '#include "mongo.h"\n'
    @crack_internal

    const int MONGO_OK = 0;
    // XXX extgen doesn't do negative const yet
    //const int MONGO_ERROR = -1;

    // mongo_error_t
    const uint32
        MONGO_CONN_SUCCESS,
        MONGO_CONN_NO_SOCKET,
        MONGO_CONN_FAIL,
        MONGO_CONN_ADDR_FAIL,
        MONGO_CONN_NOT_MASTER,
        MONGO_CONN_BAD_SET_NAME,
        MONGO_CONN_NO_PRIMARY,
        MONGO_IO_ERROR,
        MONGO_READ_SIZE_ERROR,
        MONGO_COMMAND_FAILED,
        MONGO_BSON_INVALID,
        MONGO_BSON_NOT_FINISHED;

    class mongo_host_port;
    class mongo_cursor;

    class bson;

    // Rectangle
    @boundclass(Mongo, conn, mongo, _, mongo)
    @inject 'mongo *mongo_conn_new() { return (mongo*)malloc(sizeof(mongo)); }\n'
    class mongo {
        int primary;   // ptr
        int replset;   // ptr
        int sock;
        int flags;
        int conn_timeout_ms;
        int op_timeout_ms;
        int connected;  // bool

        uint32 err;
        byteptr errstr;
        int lasterrcode;
        byteptr lasterrstr;
    }

    mongo mongo_conn_new();

    //int mongo_connect( mongo *conn , const char *host, int port );
    int mongo_connect( mongo conn , byteptr host, int port );

    //void mongo_replset_init( mongo *conn, const char *name );
    void mongo_replset_init( mongo conn, byteptr name );

    //void mongo_replset_add_seed( mongo *conn, const char *host, int port );
    void mongo_replset_add_seed( mongo conn, byteptr host, int port );

    //void mongo_parse_host( const char *host_string, mongo_host_port *host_port );
    void mongo_parse_host( byteptr host_string, mongo_host_port host_port );

    //int mongo_replset_connect( mongo *conn );
    int mongo_replset_connect( mongo conn );

    //int mongo_set_op_timeout( mongo *conn, int millis );
    int mongo_set_op_timeout( mongo conn, int millis );

    //int mongo_check_connection( mongo *conn );
    int mongo_check_connection( mongo conn );

    //int mongo_reconnect( mongo *conn );
    int mongo_reconnect( mongo conn );

    //void mongo_disconnect( mongo *conn );
    void mongo_disconnect( mongo conn );

    //void mongo_destroy( mongo *conn );
    void mongo_destroy( mongo conn );

    //int mongo_insert( mongo *conn, const char *ns, bson *data );
    int mongo_insert( mongo conn, byteptr ns, bson data );

    //int mongo_insert_batch( mongo *conn , const char *ns ,
    //                        bson **data , int num );
    int mongo_insert_batch( mongo conn , byteptr ns ,
                            array[bson] data , int num );


    //int mongo_update( mongo *conn, const char *ns, const bson *cond,
    //                  const bson *op, int flags );
    int mongo_update( mongo conn, byteptr ns, bson cond,
                      bson op, int flags );

    //int mongo_remove( mongo *conn, const char *ns, const bson *cond );
    int mongo_remove( mongo conn, byteptr ns, bson cond );

    //mongo_cursor *mongo_find( mongo *conn, const char *ns, bson *query,
    //                          bson *fields, int limit, int skip, int options );
    mongo_cursor mongo_find( mongo conn, byteptr ns, bson query,
                             bson fields, int limit, int skip, int options );

    //void mongo_cursor_init( mongo_cursor *cursor, mongo *conn, const char *ns );
    void mongo_cursor_init( mongo_cursor cursor, mongo conn, byteptr ns );

    //void mongo_cursor_set_query( mongo_cursor *cursor, bson *query );
    void mongo_cursor_set_query( mongo_cursor cursor, bson query );

    //void mongo_cursor_set_fields( mongo_cursor *cursor, bson *fields );
    void mongo_cursor_set_fields( mongo_cursor cursor, bson fields );

    //void mongo_cursor_set_skip( mongo_cursor *cursor, int skip );
    void mongo_cursor_set_skip( mongo_cursor cursor, int skip );

    //void mongo_cursor_set_limit( mongo_cursor *cursor, int limit );
    void mongo_cursor_set_limit( mongo_cursor cursor, int limit );

    //void mongo_cursor_set_options( mongo_cursor *cursor, int options );
    void mongo_cursor_set_options( mongo_cursor cursor, int options );

    //const char *mongo_cursor_data( mongo_cursor *cursor );
    byteptr mongo_cursor_data( mongo_cursor cursor );

    //const bson *mongo_cursor_bson( mongo_cursor *cursor );
    bson mongo_cursor_bson( mongo_cursor cursor );

    //int mongo_cursor_next( mongo_cursor *cursor );
    int mongo_cursor_next( mongo_cursor cursor );

    //int mongo_cursor_destroy( mongo_cursor *cursor );
    int mongo_cursor_destroy( mongo_cursor cursor );

    //bson_bool_t mongo_find_one( mongo *conn, const char *ns, bson *query,
    //                            bson *fields, bson *out );
    bool mongo_find_one( mongo conn, byteptr ns, bson query,
                         bson fields, bson out );

    //int64_t mongo_count( mongo *conn, const char *db, const char *coll,
    //                     bson *query );
    int64 mongo_count( mongo conn, byteptr db, byteptr coll,
                       bson query );

    //bson_bool_t mongo_create_simple_index( mongo *conn, const char *ns, const char *field, int options, bson *out );
    bool mongo_create_simple_index( mongo conn, byteptr ns, byteptr field, int options, bson out );

    //bson_bool_t mongo_run_command( mongo *conn, const char *db, bson *command, bson *out );
    bool mongo_run_command( mongo conn, byteptr db, bson command, bson out );

    //int mongo_simple_int_command( mongo *conn, const char *db,
    //                              const char *cmd, int arg, bson *out );
    int mongo_simple_int_command( mongo conn, byteptr db,
                                  byteptr cmd, int arg, bson out );

    //bson_bool_t mongo_simple_str_command( mongo *conn, const char *db, const char *cmd, const char *arg, bson *out );
    bool mongo_simple_str_command( mongo conn, byteptr db, byteptr cmd, byteptr arg, bson out );

    //int mongo_cmd_drop_db( mongo *conn, const char *db );
    int mongo_cmd_drop_db( mongo conn, byteptr db );

    //bson_bool_t mongo_cmd_drop_collection( mongo *conn, const char *db, const char *collection, bson *out );
    bool mongo_cmd_drop_collection( mongo conn, byteptr db, byteptr collection, bson out );

    //int mongo_cmd_add_user( mongo *conn, const char *db, const char *user, const char *pass );
    int mongo_cmd_add_user( mongo conn, byteptr db, byteptr user, byteptr pass );

    //int mongo_cmd_authenticate( mongo *conn, const char *db, const char *user, const char *pass );
    int mongo_cmd_authenticate( mongo conn, byteptr db, byteptr user, byteptr pass );

    //bson_bool_t mongo_cmd_ismaster( mongo *conn, bson *out );
    bool mongo_cmd_ismaster( mongo conn, bson out );

    //int mongo_cmd_get_last_error( mongo *conn, const char *db, bson *out );
    int mongo_cmd_get_last_error( mongo conn, byteptr db, bson out );

    //int mongo_cmd_get_prev_error( mongo *conn, const char *db, bson *out );
    int mongo_cmd_get_prev_error( mongo conn, byteptr db, bson out );

    //void mongo_cmd_reset_error( mongo *conn, const char *db );
    void mongo_cmd_reset_error( mongo conn, byteptr db );

    // bson.h
    const uint32
        BSON_SIZE_OVERFLOW,
        BSON_VALID,
        BSON_NOT_UTF8,
        BSON_FIELD_HAS_DOT,
        BSON_FIELD_INIT_DOLLAR,
        BSON_ALREADY_FINISHED,
        BSON_BIN_BINARY,
        BSON_BIN_FUNC,
        BSON_BIN_BINARY_OLD,
        BSON_BIN_UUID,
        BSON_BIN_MD5,
        BSON_BIN_USER,
        BSON_EOO,
        BSON_DOUBLE,
        BSON_STRING,
        BSON_OBJECT,
        BSON_ARRAY,
        BSON_BINDATA,
        BSON_UNDEFINED,
        BSON_OID,
        BSON_BOOL,
        BSON_DATE,
        BSON_NULL,
        BSON_REGEX,
        BSON_DBREF,
        BSON_CODE,
        BSON_SYMBOL,
        BSON_CODEWSCOPE,
        BSON_INT,
        BSON_TIMESTAMP,
        BSON_LONG;

    class bson_oid_t;
    class bson_timestamp_t;
    class bson_iterator;

    //int bson_size( const bson *b );
    int bson_size( bson b );

    //void bson_print( bson *b );
    void bson_print( bson b );

    //const char *bson_data( bson *b );
    byteptr bson_data( bson b );

    //void bson_print_raw( const char *bson , int depth );
    void bson_print_raw( byteptr bson , int depth );

    //bson_type bson_find( bson_iterator *it, const bson *obj, const char *name );
    int bson_find( bson_iterator it, bson obj, byteptr name );

    //void bson_iterator_init( bson_iterator *i , const bson *b );
    void bson_iterator_init( bson_iterator i , bson b );

    //void bson_iterator_from_buffer( bson_iterator *i, const char *buffer );
    void bson_iterator_from_buffer( bson_iterator i, byteptr buffer );

    //bson_bool_t bson_iterator_more( const bson_iterator *i );
    bool bson_iterator_more( bson_iterator i );

    //bson_type bson_iterator_next( bson_iterator *i );
    int bson_iterator_next( bson_iterator i );

    //bson_type bson_iterator_type( const bson_iterator *i );
    int bson_iterator_type( bson_iterator i );

    //const char *bson_iterator_key( const bson_iterator *i );
    byteptr bson_iterator_key( bson_iterator i );

    //const char *bson_iterator_value( const bson_iterator *i );
    byteptr bson_iterator_value( bson_iterator i );

    //double bson_iterator_double( const bson_iterator *i );
    float64 bson_iterator_double( bson_iterator i );

    //int bson_iterator_int( const bson_iterator *i );
    int bson_iterator_int( bson_iterator i );

    //int64_t bson_iterator_long( const bson_iterator *i );
    int64 bson_iterator_long( bson_iterator i );

    //bson_timestamp_t bson_iterator_timestamp( const bson_iterator *i );
    bson_timestamp_t bson_iterator_timestamp( bson_iterator i );

    //bson_bool_t bson_iterator_bool( const bson_iterator *i );
    bool bson_iterator_bool( bson_iterator i );

    //double bson_iterator_double_raw( const bson_iterator *i );
    float64 bson_iterator_double_raw( bson_iterator i );

    //int bson_iterator_int_raw( const bson_iterator *i );
    int bson_iterator_int_raw( bson_iterator i );

    //int64_t bson_iterator_long_raw( const bson_iterator *i );
    int64 bson_iterator_long_raw( bson_iterator i );

    //bson_bool_t bson_iterator_bool_raw( const bson_iterator *i );
    bool bson_iterator_bool_raw( bson_iterator i );

    //bson_oid_t *bson_iterator_oid( const bson_iterator *i );
    bson_oid_t bson_iterator_oid( bson_iterator i );

    //const char *bson_iterator_string( const bson_iterator *i );
    byteptr bson_iterator_string( bson_iterator i );

    //int bson_iterator_string_len( const bson_iterator *i );
    int bson_iterator_string_len( bson_iterator i );

    //const char *bson_iterator_code( const bson_iterator *i );
    byteptr bson_iterator_code( bson_iterator i );

    //void bson_iterator_code_scope( const bson_iterator *i, bson *scope );
    void bson_iterator_code_scope( bson_iterator i, bson scope );

    //bson_date_t bson_iterator_date( const bson_iterator *i );
    int64 bson_iterator_date( bson_iterator i );

    //time_t bson_iterator_time_t( const bson_iterator *i );
    int64 bson_iterator_time_t( bson_iterator i );

    //int bson_iterator_bin_len( const bson_iterator *i );
    int bson_iterator_bin_len( bson_iterator i );

    //char bson_iterator_bin_type( const bson_iterator *i );
    byte bson_iterator_bin_type( bson_iterator i );

    //const char *bson_iterator_bin_data( const bson_iterator *i );
    byteptr bson_iterator_bin_data( bson_iterator i );

    //const char *bson_iterator_regex( const bson_iterator *i );
    byteptr bson_iterator_regex( bson_iterator i );

    //const char *bson_iterator_regex_opts( const bson_iterator *i );
    byteptr bson_iterator_regex_opts( bson_iterator i );

    //void bson_iterator_subobject( const bson_iterator *i, bson *sub );
    void bson_iterator_subobject( bson_iterator i, bson sub );

    //void bson_iterator_subiterator( const bson_iterator *i, bson_iterator *sub );
    void bson_iterator_subiterator( bson_iterator i, bson_iterator sub );

    //void bson_oid_from_string( bson_oid_t *oid, const char *str );
    void bson_oid_from_string( bson_oid_t oid, byteptr str );

    //void bson_oid_to_string( const bson_oid_t *oid, char *str );
    void bson_oid_to_string( bson_oid_t oid, byteptr str );

    //void bson_oid_gen( bson_oid_t *oid );
    void bson_oid_gen( bson_oid_t oid );

    //void bson_set_oid_fuzz( int ( *func )( void ) );

    //void bson_set_oid_inc( int ( *func )( void ) );

    //time_t bson_oid_generated_time( bson_oid_t *oid );
    int64 bson_oid_generated_time( bson_oid_t oid );

    //void bson_init( bson *b );
    void bson_init( bson b );

    //int bson_init_data( bson *b , char *data );
    int bson_init_data( bson b , byteptr data );

    //int bson_init_finished_data( bson *b, char *data );
    int bson_init_finished_data( bson b, byteptr data );

    //void bson_init_size( bson *b, int size );
    void bson_init_size( bson b, int size );

    //int bson_ensure_space( bson *b, const int bytesNeeded );
    int bson_ensure_space( bson b, int bytesNeeded );

    //int bson_finish( bson *b );
    int bson_finish( bson b );

    //void bson_destroy( bson *b );
    void bson_destroy( bson b );

    //bson *bson_empty( bson *obj );
    bson bson_empty( bson obj );

    //int bson_copy( bson *out, const bson *in );
    int bson_copy( bson outo, bson ino );

    //int bson_append_oid( bson *b, const char *name, const bson_oid_t *oid );
    int bson_append_oid( bson b, byteptr name, bson_oid_t oid );

    //int bson_append_new_oid( bson *b, const char *name );
    int bson_append_new_oid( bson b, byteptr name );

    //int bson_append_int( bson *b, const char *name, const int i );
    int bson_append_int( bson b, byteptr name, int i );

    //int bson_append_long( bson *b, const char *name, const int64_t i );
    int bson_append_long( bson b, byteptr name, int64 i );

    //int bson_append_double( bson *b, const char *name, const double d );
    int bson_append_double( bson b, byteptr name, float64 d );

    //int bson_append_string( bson *b, const char *name, const char *str );

    //int bson_append_string_n( bson *b, const char *name, const char *str, int len );
    int bson_append_string_n( bson b, byteptr name, byteptr str, int len );

    //int bson_append_symbol( bson *b, const char *name, const char *str );

    //int bson_append_symbol_n( bson *b, const char *name, const char *str, int len );
    int bson_append_symbol_n( bson b, byteptr name, byteptr str, int len );

    //int bson_append_code( bson *b, const char *name, const char *str );

    //int bson_append_code_n( bson *b, const char *name, const char *str, int len );
    int bson_append_code_n( bson b, byteptr name, byteptr str, int len );

    //int bson_append_code_w_scope( bson *b, const char *name, const char *code, const bson *scope );

    //int bson_append_code_w_scope_n( bson *b, const char *name, const char *code, int size, const bson *scope );
    int bson_append_code_w_scope_n( bson b, byteptr name, byteptr code, int size, bson scope );

    //int bson_append_binary( bson *b, const char *name, char type, const char *str, int len );
    int bson_append_binary( bson b, byteptr name, byte type, byteptr str, int len );

    //int bson_append_bool( bson *b, const char *name, const bson_bool_t v );
    int bson_append_bool( bson b, byteptr name, bool v );

    //int bson_append_null( bson *b, const char *name );
    int bson_append_null( bson b, byteptr name );

    //int bson_append_undefined( bson *b, const char *name );
    int bson_append_undefined( bson b, byteptr name );

    //int bson_append_regex( bson *b, const char *name, const char *pattern, const char *opts );
    int bson_append_regex( bson b, byteptr name, byteptr pattern, byteptr opts );

    //int bson_append_bson( bson *b, const char *name, const bson *bson );
    int bson_append_bson( bson b, byteptr name, bson bson );

    //int bson_append_element( bson *b, const char *name_or_null, const bson_iterator *elem );
    int bson_append_element( bson b, byteptr name_or_null, bson_iterator elem );

    //int bson_append_timestamp( bson *b, const char *name, bson_timestamp_t *ts );
    int bson_append_timestamp( bson b, byteptr name, bson_timestamp_t ts );

    //int bson_append_date( bson *b, const char *name, bson_date_t millis );
    int bson_append_date( bson b, byteptr name, int64 millis );

    //int bson_append_time_t( bson *b, const char *name, time_t secs );
    int bson_append_time_t( bson b, byteptr name, int64 secs );

    //int bson_append_start_object( bson *b, const char *name );
    int bson_append_start_object( bson b, byteptr name );

    //int bson_append_start_array( bson *b, const char *name );
    int bson_append_start_array( bson b, byteptr name );

    //int bson_append_finish_object( bson *b );
    int bson_append_finish_object( bson b );

    //int bson_append_finish_array( bson *b );
    int bson_append_finish_array( bson b );

    //void bson_numstr( char *str, int i );
    void bson_numstr( byteptr str, int i );

    //void bson_incnumstr( char *str );
    //void bson_incnumstr( byteptr str );

/*
    void *bson_malloc( int size );

    void *bson_realloc( void *ptr, int size );

    bson_err_handler set_bson_err_handler( bson_err_handler func );

    void bson_fatal( int ok );

    void bson_fatal_msg( int ok, const char *msg );

    void bson_builder_error( bson *b );
*/

}
